{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Courses National 5 Software Databases Web Higher Software Databases","title":"Courses"},{"location":"#courses","text":"","title":"Courses"},{"location":"#national-5","text":"Software Databases Web","title":"National 5"},{"location":"#higher","text":"Software Databases","title":"Higher"},{"location":"N5-CS-DDD/","text":"N5 Computing Science {:.no_toc} Home Database Design and Development {:.no_toc} All the code examples use SQLite. They will work with Replit and DB Browser for SQLite . Note: These notes are focused on N5 Computing Science so some terms might be used differently. SQLite, and SQL, keywords are not case sensitive. The following are all equally valid: SELECT / SeLeCt / select In the examples, the keywords will be in uppercase. SQLite, and SQL, is not whitespace sensitive. This means a statement can be all on a single line or split over multiple lines. In general, the examples have one keyword per line. The statements are terminated with a semicolon, ; . An individual statement will run without a semicolon but multiple statements will not. Table of Contents {#toc} {:.no_toc} TOC will be displayed here {:toc} Attribute types (Data types) SQLite has fewer data types than SQL. However, SQL datatypes can be used and SQLite will match these to it's own datatypes. Data type Example data Text \"Cat\", \"01871\" Number (INT) -99, 0, 99 Number (REAL) -99.0, 0.0, 99.0 Date \"2024-02-29\" Time \"13:15:00\" Boolean TRUE, FALSE Example Data The example database contains the tables and records that the SQL examples will work with. The file can be opened with DB Browser for SQLite . The first 4 records of the data used in the examples are shown in the following tables: Table: pet {:.no_toc} pet_id name species dob 1 Hans Cat 2015-09-22 2 Minnnie Gerbil 2021-05-24 3 Bo Rabbit 2011-10-13 4 Joscelin Gerbil 2022-02-19 Table: vaccination {:.no_toc} vax_id pet_id vax_date name reaction price 1 13 2019-09-03 Distemper TRUE 45.00 2 5 2020-06-23 Canine hepatitis FALSE 35.50 3 1 2015-12-17 Cat Flu FALSE 12.99 4 17 2015-10-05 Cat Flu FALSE 12.99 ER Diagram {:.no_toc} Back to Table of Contents Views tables To view all the tables in the database the name field of the sqlite_schema table is displayed. SELECT name FROM sqlite_schema WHERE type = \"table\"; Back to Table of Contents Information Comments Single line comment. -- This comment is not displayed Multiline comment. /* This comment is not displayed This comment is not displayed */ Display information It is possible to display simple messages. Replit .print Hello World! DB Browser for SQLite SELECT \"Hello World!\"; Display Data To search a database, a basic statement with two keywords SELECT and FROM is used. The SELECT keyword lists the required field(s). The FROM keyword states the table(s) that the fields are in. To display all the fields the * symbol is used. SELECT * FROM pet; To select one, or more fields, their names are used. SELECT name, species FROM pet; Back to Table of Contents Filter results To limit the number of records returned, the WHERE keyword is used with a comparison operator. Note: Whilst SQL keywords are not case sensitive, search terms are. Searching for Hello will not find hello , HELLO , or any other variation. Comparison operators Comparison operators are used to compare one value with another. Symbol Meaning = Equality (the same as) <> Inequality (not the same as) > Greater than >= Greater than or equal to < Less than <= Less than or equal to Simple search A simple search compares a field in a record with a value. If the comparison is True then the required fields of that record are displayed. SELECT * FROM vaccination WHERE species = \"Cat\"; Back to Table of Contents Complex search A complex search compares two fields. AND If both comparisons are True then the required fields of that record are displayed. SELECT * FROM vaccination WHERE name = \"Distemper\" AND reaction = True; OR If either comparison is True then the required fields of that record are displayed. SELECT * FROM vaccination WHERE name = \"Distemper\" OR reaction = True; Back to Table of Contents Sort results It is possible to sort the output of a search using ORDER BY and stating the field, or fields. Fields are sorted ascending, smallest to largest, by default. SELECT * FROM pet ORDER BY species ASC; To change the sort order of a field to descending the keyword DESC used. The keyword ASC is not needed but can be used to explicitly sort ascending. More than one field can be sorted. SELECT * FROM pet ORDER BY species DESC, name ASC; Back to Table of Contents Equi-join between tables Tables are joined using the primary key of one table and the foreign key of the other table. Generic SELECT * FROM table1, table2 WHERE table1.primary_key = table2.foreign_key; Example Note: In this example both tables have a field with the same name. So that the database can distinguish between the fields they must be qualified with the table name. Just using the field name would be ambiguous . SELECT * FROM pet, vaccination WHERE pet.pet_id = vaccination.pet_id; Back to Table of Contents Add New Data It is possible to insert a record, multiple records, or partial records into a table using INSERT INTO and VALUES . All validation rules must be met for the new data to be added. Single record INSERT INTO pet VALUES (26, \"Tiger\", \"Cat\", \"2022-04-17\"); Multiple records INSERT INTO pet VALUES (27, \"Bill\", \"Ferret\", \"2022-05-01\"), (28, \"Ben\", \"Ferret\", \"2022-05-01\"); Partial record(s) If a partial record is added then the field names must be stated. The values must be in the same order as the fields. INSERT INTO pet (\"species\", \"name\", \"pet_id\") VALUES (\"Dog\", \"Winston\", 29); Back to Table of Contents Modify Data Note: It is possible to damage the data with an UPDATE statement. It is advisable to practise with a SELECT statement first to see if the correct record, or records, will be changed. Single value changed UPDATE pet SET dob = \"2022-04-01\" WHERE pet_id = 29; Multiple values changed UPDATE pet SET name = \"Churchill\", species = \"Cat\" WHERE pet_id = 29; Caution : without the WHERE clause all records would be updated! Back to Table of Contents Remove Data Note: It is possible to damage the data with a DELETE FROM statement. It is advisable to practise with a SELECT statement first to see if the correct record, or records, will be deleted. DELETE FROM pet WHERE pet_id = 29; Caution : without the WHERE clause all records would be deleted! Back to Table of Contents Create a table Data types Type SQL Comment Text VARCHAR( size ) Size = number of characters Number INT or REAL Date DATE YYYY-MM-DD Time TIME HH:MM:SS Boolean BOOL Validation Type SQL Presence check NOT NULL Restricted choice CHECK( field ) IN (\"S\", \"M\", \"L\") Field length CHECK(LENGTH( field ) = 3) Range CHECK( field >=1 AND field <=6) Example Data dictionaries Entity: vehicle Attribute Key Type Size Req'd Validation veh_reg PK text 8 Y length: >=4 make text 20 N model text 20 N colour text 15 Y Entity: repair Attribute Key Type Size Req'd Validation repair_no PK number Y veh_reg FK text 8 Y Exists in vehicle table repair_date date N cost_estimate number N range: >= 0.00 cost_actual number N range: >= 0.00 completed boolean Y paid text 7 Y Restricted choice: Nothing, Part, All SQL CREATE TABLE vehicle( veh_reg VARCHAR(8) NOT NULL CHECK(LENGTH(veh_reg >= 4)), make VARCHAR(20), model VARCHAR(20), colour VARCHAR(15) NOT NULL, PRIMARY KEY (veh_reg) ); CREATE TABLE repair( repair_no INT NOT NULL, veh_reg VARCHAR(8) NOT NULL, repair_date DATE, cost_estimate REAL CHECK(cost_estimate >= 0), cost_actual REAL CHECK(cost_actual >= 0), completed BOOL NOT NULL, paid VARCHAR(7) NOT NULL CHECK(paid IN (\"Nothing\", \"Part\", \"All\")), FOREIGN KEY (veh_reg) REFERENCES vehicle(veh_reg), PRIMARY KEY (repair_no) ); Back to Table of Contents Modify a table Modifying a table involves a number of steps: Get the details of the table Create a new table using the modified details of the old table Copy the data from the old table to the new table Check the data has been copied Turn off referential integrity - if needed Delete the old table Rename the new table as the old table Turn on referential integrity - if needed 1. Get details To view the field names, keys, data types, and validation of a table the sqlite_schema.sql field for the required table is displayed: SELECT sql FROM sqlite_schema WHERE tbl_name = \"vaccination\"; The output will look similar to: CREATE TABLE \"vaccination\" ( vax_id INT NOT NULL, pet_id INT NOT NULL, vax_date DATE NOT NULL, name VARCHAR(30) NOT NULL, reaction BOOL NOT NULL, price REAL NOT NULL, FOREIGN KEY(pet_id) REFERENCES pet(pet_id), PRIMARY KEY(vax_id) ) 2. Create new table Create a new table with the required changes made. CREATE TABLE new_vaccination ( vax_id INT NOT NULL, pet_id INT NOT NULL, vax_date DATE NOT NULL, name VARCHAR(30) NOT NULL CHECK(LENGTH(namen) >= 2), reaction BOOL NOT NULL, price REAL NOT NULL CHECK(price >= 10 AND price <= 100), FOREIGN KEY(pet_id) REFERENCES pet(pet_id) PRIMARY KEY(vax_id), ); 3. Copy data Copy the data from the old table into the new table. INSERT INTO new_vaccianation SELECT * FROM vaccination; 4. Check data Check that the data has been copied into the new table. SELECT * FROM new_vaccianation; 5. Turn off referential integrity If the primary key of the old table is used as a foreign key in another table then referential integrity will need to be turned off. PRAGMA foreign_keys = off; 6. Delete old table Delete the old table. DROP TABLE staff; 7. Rename new table Rename the new table. ALTER TABLE new_vaccination RENAME TO vaccination; 8. Turn off referential integrity If referential integrity was turned off, it will needed to be turned on. PRAGMA foreign_keys = on; Examples Display data Select various fields from two tables, with two search conditions and ordered on two fields. SELECT pet.name, species, vaccination.name, vax_date FROM pet, vaccination WHERE pet.pet_id = vaccination.pet_id AND species = \"Rabbit\" ORDER BY pet.name ASC, vax_date DESC; Change data Update vaccination records so that Feline Leukaemia Virus is replaced with FLV . Create a SELECT statement to test that the WHERE clause selects the correct records. SELECT * FROM vaccination WHERE name = \"Feline Leukaemia Virus\"; Create an UPDATE statement to update the correct records. UPDATE vaccination SET name = \"FLV\" WHERE name = \"Feline Leukaemia Virus\"; Check that the changes have been made. SELECT * FROM vaccination WHERE name = \"FLV\" OR name = \"Feline Leukaemia Virus\"; Back to Table of Contents","title":"N5 Computing Science"},{"location":"N5-CS-DDD/#n5-computing-science","text":"{:.no_toc} Home","title":"N5 Computing Science"},{"location":"N5-CS-DDD/#database-design-and-development","text":"{:.no_toc} All the code examples use SQLite. They will work with Replit and DB Browser for SQLite . Note: These notes are focused on N5 Computing Science so some terms might be used differently. SQLite, and SQL, keywords are not case sensitive. The following are all equally valid: SELECT / SeLeCt / select In the examples, the keywords will be in uppercase. SQLite, and SQL, is not whitespace sensitive. This means a statement can be all on a single line or split over multiple lines. In general, the examples have one keyword per line. The statements are terminated with a semicolon, ; . An individual statement will run without a semicolon but multiple statements will not.","title":"Database Design and Development"},{"location":"N5-CS-DDD/#table-of-contents-toc","text":"{:.no_toc} TOC will be displayed here {:toc}","title":"Table of Contents {#toc}"},{"location":"N5-CS-DDD/#attribute-types-data-types","text":"SQLite has fewer data types than SQL. However, SQL datatypes can be used and SQLite will match these to it's own datatypes. Data type Example data Text \"Cat\", \"01871\" Number (INT) -99, 0, 99 Number (REAL) -99.0, 0.0, 99.0 Date \"2024-02-29\" Time \"13:15:00\" Boolean TRUE, FALSE","title":"Attribute types (Data types)"},{"location":"N5-CS-DDD/#example-data","text":"The example database contains the tables and records that the SQL examples will work with. The file can be opened with DB Browser for SQLite . The first 4 records of the data used in the examples are shown in the following tables:","title":"Example Data"},{"location":"N5-CS-DDD/#table-pet","text":"{:.no_toc} pet_id name species dob 1 Hans Cat 2015-09-22 2 Minnnie Gerbil 2021-05-24 3 Bo Rabbit 2011-10-13 4 Joscelin Gerbil 2022-02-19","title":"Table: pet"},{"location":"N5-CS-DDD/#table-vaccination","text":"{:.no_toc} vax_id pet_id vax_date name reaction price 1 13 2019-09-03 Distemper TRUE 45.00 2 5 2020-06-23 Canine hepatitis FALSE 35.50 3 1 2015-12-17 Cat Flu FALSE 12.99 4 17 2015-10-05 Cat Flu FALSE 12.99","title":"Table: vaccination"},{"location":"N5-CS-DDD/#er-diagram","text":"{:.no_toc} Back to Table of Contents","title":"ER Diagram"},{"location":"N5-CS-DDD/#views-tables","text":"To view all the tables in the database the name field of the sqlite_schema table is displayed. SELECT name FROM sqlite_schema WHERE type = \"table\"; Back to Table of Contents","title":"Views tables"},{"location":"N5-CS-DDD/#information","text":"","title":"Information"},{"location":"N5-CS-DDD/#comments","text":"Single line comment. -- This comment is not displayed Multiline comment. /* This comment is not displayed This comment is not displayed */","title":"Comments"},{"location":"N5-CS-DDD/#display-information","text":"It is possible to display simple messages.","title":"Display information"},{"location":"N5-CS-DDD/#replit","text":".print Hello World!","title":"Replit"},{"location":"N5-CS-DDD/#db-browser-for-sqlite","text":"SELECT \"Hello World!\";","title":"DB Browser for SQLite"},{"location":"N5-CS-DDD/#display-data","text":"To search a database, a basic statement with two keywords SELECT and FROM is used. The SELECT keyword lists the required field(s). The FROM keyword states the table(s) that the fields are in. To display all the fields the * symbol is used. SELECT * FROM pet; To select one, or more fields, their names are used. SELECT name, species FROM pet; Back to Table of Contents","title":"Display Data"},{"location":"N5-CS-DDD/#filter-results","text":"To limit the number of records returned, the WHERE keyword is used with a comparison operator. Note: Whilst SQL keywords are not case sensitive, search terms are. Searching for Hello will not find hello , HELLO , or any other variation.","title":"Filter results"},{"location":"N5-CS-DDD/#comparison-operators","text":"Comparison operators are used to compare one value with another. Symbol Meaning = Equality (the same as) <> Inequality (not the same as) > Greater than >= Greater than or equal to < Less than <= Less than or equal to","title":"Comparison operators"},{"location":"N5-CS-DDD/#simple-search","text":"A simple search compares a field in a record with a value. If the comparison is True then the required fields of that record are displayed. SELECT * FROM vaccination WHERE species = \"Cat\"; Back to Table of Contents","title":"Simple search"},{"location":"N5-CS-DDD/#complex-search","text":"A complex search compares two fields.","title":"Complex search"},{"location":"N5-CS-DDD/#and","text":"If both comparisons are True then the required fields of that record are displayed. SELECT * FROM vaccination WHERE name = \"Distemper\" AND reaction = True;","title":"AND"},{"location":"N5-CS-DDD/#or","text":"If either comparison is True then the required fields of that record are displayed. SELECT * FROM vaccination WHERE name = \"Distemper\" OR reaction = True; Back to Table of Contents","title":"OR"},{"location":"N5-CS-DDD/#sort-results","text":"It is possible to sort the output of a search using ORDER BY and stating the field, or fields. Fields are sorted ascending, smallest to largest, by default. SELECT * FROM pet ORDER BY species ASC; To change the sort order of a field to descending the keyword DESC used. The keyword ASC is not needed but can be used to explicitly sort ascending. More than one field can be sorted. SELECT * FROM pet ORDER BY species DESC, name ASC; Back to Table of Contents","title":"Sort results"},{"location":"N5-CS-DDD/#equi-join-between-tables","text":"Tables are joined using the primary key of one table and the foreign key of the other table.","title":"Equi-join between tables"},{"location":"N5-CS-DDD/#generic","text":"SELECT * FROM table1, table2 WHERE table1.primary_key = table2.foreign_key;","title":"Generic"},{"location":"N5-CS-DDD/#example","text":"Note: In this example both tables have a field with the same name. So that the database can distinguish between the fields they must be qualified with the table name. Just using the field name would be ambiguous . SELECT * FROM pet, vaccination WHERE pet.pet_id = vaccination.pet_id; Back to Table of Contents","title":"Example"},{"location":"N5-CS-DDD/#add-new-data","text":"It is possible to insert a record, multiple records, or partial records into a table using INSERT INTO and VALUES . All validation rules must be met for the new data to be added.","title":"Add New Data"},{"location":"N5-CS-DDD/#single-record","text":"INSERT INTO pet VALUES (26, \"Tiger\", \"Cat\", \"2022-04-17\");","title":"Single record"},{"location":"N5-CS-DDD/#multiple-records","text":"INSERT INTO pet VALUES (27, \"Bill\", \"Ferret\", \"2022-05-01\"), (28, \"Ben\", \"Ferret\", \"2022-05-01\");","title":"Multiple records"},{"location":"N5-CS-DDD/#partial-records","text":"If a partial record is added then the field names must be stated. The values must be in the same order as the fields. INSERT INTO pet (\"species\", \"name\", \"pet_id\") VALUES (\"Dog\", \"Winston\", 29); Back to Table of Contents","title":"Partial record(s)"},{"location":"N5-CS-DDD/#modify-data","text":"Note: It is possible to damage the data with an UPDATE statement. It is advisable to practise with a SELECT statement first to see if the correct record, or records, will be changed.","title":"Modify Data"},{"location":"N5-CS-DDD/#single-value-changed","text":"UPDATE pet SET dob = \"2022-04-01\" WHERE pet_id = 29;","title":"Single value changed"},{"location":"N5-CS-DDD/#multiple-values-changed","text":"UPDATE pet SET name = \"Churchill\", species = \"Cat\" WHERE pet_id = 29; Caution : without the WHERE clause all records would be updated! Back to Table of Contents","title":"Multiple values changed"},{"location":"N5-CS-DDD/#remove-data","text":"Note: It is possible to damage the data with a DELETE FROM statement. It is advisable to practise with a SELECT statement first to see if the correct record, or records, will be deleted. DELETE FROM pet WHERE pet_id = 29; Caution : without the WHERE clause all records would be deleted! Back to Table of Contents","title":"Remove Data"},{"location":"N5-CS-DDD/#create-a-table","text":"","title":"Create a table"},{"location":"N5-CS-DDD/#data-types","text":"Type SQL Comment Text VARCHAR( size ) Size = number of characters Number INT or REAL Date DATE YYYY-MM-DD Time TIME HH:MM:SS Boolean BOOL","title":"Data types"},{"location":"N5-CS-DDD/#validation","text":"Type SQL Presence check NOT NULL Restricted choice CHECK( field ) IN (\"S\", \"M\", \"L\") Field length CHECK(LENGTH( field ) = 3) Range CHECK( field >=1 AND field <=6)","title":"Validation"},{"location":"N5-CS-DDD/#example_1","text":"","title":"Example"},{"location":"N5-CS-DDD/#data-dictionaries","text":"","title":"Data dictionaries"},{"location":"N5-CS-DDD/#entity-vehicle","text":"Attribute Key Type Size Req'd Validation veh_reg PK text 8 Y length: >=4 make text 20 N model text 20 N colour text 15 Y","title":"Entity: vehicle"},{"location":"N5-CS-DDD/#entity-repair","text":"Attribute Key Type Size Req'd Validation repair_no PK number Y veh_reg FK text 8 Y Exists in vehicle table repair_date date N cost_estimate number N range: >= 0.00 cost_actual number N range: >= 0.00 completed boolean Y paid text 7 Y Restricted choice: Nothing, Part, All","title":"Entity: repair"},{"location":"N5-CS-DDD/#sql","text":"CREATE TABLE vehicle( veh_reg VARCHAR(8) NOT NULL CHECK(LENGTH(veh_reg >= 4)), make VARCHAR(20), model VARCHAR(20), colour VARCHAR(15) NOT NULL, PRIMARY KEY (veh_reg) ); CREATE TABLE repair( repair_no INT NOT NULL, veh_reg VARCHAR(8) NOT NULL, repair_date DATE, cost_estimate REAL CHECK(cost_estimate >= 0), cost_actual REAL CHECK(cost_actual >= 0), completed BOOL NOT NULL, paid VARCHAR(7) NOT NULL CHECK(paid IN (\"Nothing\", \"Part\", \"All\")), FOREIGN KEY (veh_reg) REFERENCES vehicle(veh_reg), PRIMARY KEY (repair_no) ); Back to Table of Contents","title":"SQL"},{"location":"N5-CS-DDD/#modify-a-table","text":"Modifying a table involves a number of steps: Get the details of the table Create a new table using the modified details of the old table Copy the data from the old table to the new table Check the data has been copied Turn off referential integrity - if needed Delete the old table Rename the new table as the old table Turn on referential integrity - if needed","title":"Modify a table"},{"location":"N5-CS-DDD/#1-get-details","text":"To view the field names, keys, data types, and validation of a table the sqlite_schema.sql field for the required table is displayed: SELECT sql FROM sqlite_schema WHERE tbl_name = \"vaccination\"; The output will look similar to: CREATE TABLE \"vaccination\" ( vax_id INT NOT NULL, pet_id INT NOT NULL, vax_date DATE NOT NULL, name VARCHAR(30) NOT NULL, reaction BOOL NOT NULL, price REAL NOT NULL, FOREIGN KEY(pet_id) REFERENCES pet(pet_id), PRIMARY KEY(vax_id) )","title":"1. Get details"},{"location":"N5-CS-DDD/#2-create-new-table","text":"Create a new table with the required changes made. CREATE TABLE new_vaccination ( vax_id INT NOT NULL, pet_id INT NOT NULL, vax_date DATE NOT NULL, name VARCHAR(30) NOT NULL CHECK(LENGTH(namen) >= 2), reaction BOOL NOT NULL, price REAL NOT NULL CHECK(price >= 10 AND price <= 100), FOREIGN KEY(pet_id) REFERENCES pet(pet_id) PRIMARY KEY(vax_id), );","title":"2. Create new table"},{"location":"N5-CS-DDD/#3-copy-data","text":"Copy the data from the old table into the new table. INSERT INTO new_vaccianation SELECT * FROM vaccination;","title":"3. Copy data"},{"location":"N5-CS-DDD/#4-check-data","text":"Check that the data has been copied into the new table. SELECT * FROM new_vaccianation;","title":"4. Check data"},{"location":"N5-CS-DDD/#5-turn-off-referential-integrity","text":"If the primary key of the old table is used as a foreign key in another table then referential integrity will need to be turned off. PRAGMA foreign_keys = off;","title":"5. Turn off referential integrity"},{"location":"N5-CS-DDD/#6-delete-old-table","text":"Delete the old table. DROP TABLE staff;","title":"6. Delete old table"},{"location":"N5-CS-DDD/#7-rename-new-table","text":"Rename the new table. ALTER TABLE new_vaccination RENAME TO vaccination;","title":"7. Rename new table"},{"location":"N5-CS-DDD/#8-turn-off-referential-integrity","text":"If referential integrity was turned off, it will needed to be turned on. PRAGMA foreign_keys = on;","title":"8. Turn off referential integrity"},{"location":"N5-CS-DDD/#examples","text":"","title":"Examples"},{"location":"N5-CS-DDD/#display-data_1","text":"Select various fields from two tables, with two search conditions and ordered on two fields. SELECT pet.name, species, vaccination.name, vax_date FROM pet, vaccination WHERE pet.pet_id = vaccination.pet_id AND species = \"Rabbit\" ORDER BY pet.name ASC, vax_date DESC;","title":"Display data"},{"location":"N5-CS-DDD/#change-data","text":"Update vaccination records so that Feline Leukaemia Virus is replaced with FLV . Create a SELECT statement to test that the WHERE clause selects the correct records. SELECT * FROM vaccination WHERE name = \"Feline Leukaemia Virus\"; Create an UPDATE statement to update the correct records. UPDATE vaccination SET name = \"FLV\" WHERE name = \"Feline Leukaemia Virus\"; Check that the changes have been made. SELECT * FROM vaccination WHERE name = \"FLV\" OR name = \"Feline Leukaemia Virus\"; Back to Table of Contents","title":"Change data"},{"location":"N5-CS-SDD/","text":"N5 Computing Science {:.no_toc} Home Software Design and Development {:.no_toc} All the code examples use Python. They will work with Replit and Thonny . Python uses indentation (spaces at the beginning of a line) to show where code blocks are. Note: These notes are focused on N5 Computing Science so some terms are used differently. Any reference to an array will actually use a list . Table of Contents {#toc} {:.no_toc} TOC will be displayed here {:toc} Information Comments Single line comment. # This comment is not displayed Multiline comment. \"\"\" This comment is not displayed This comment is not displayed \"\"\" Display information print(\"Hello world\") print(3.14) Computational constructs Assign values Variables are used to store values. An assignment statement has 3 parts: = is the assignment operator (an equals sign in maths) The value to the right of the assignment operator The variable name to the left of the assignment operator The value is assigned to (stored in) the variable. The value might need to be calculated first before being assigned. myInteger = 5 myReal = 3.14 myCharacter = \"&\" myString = \"Hello\" myBoolean = True myArrayOfIntegers = [56, 34, 2, 85, 51] myArrayOfStrings = [\"\"] * 4 Arithmetic operations Addition 4 + 2 Subtraction 4 - 2 Multiplication 4 * 2 Division 4 / 2 Exponentiation (to the power of) 4 ** 2 Examples myMultiplication = 3 * 2 print(myMultiplication) mySquare = 3 ** 2 print(mySquare) myAge = 21 myAge = myAge + 1 print(myAge) Back to Table of Contents Concatenation Concatenate means to join together. Strings A string can be concatenated with another string. part1 = \"Ho\" part2 = \"use\" word = part1 + part2 print(word) Be sure to include a space between words when concatenating. word1 = \"Hello\" word2 = \"world\" phrase = word1 + \" \" + word2 print(phrase) To concatenate something that is not a string, it must be cast (converted) to a string. age = 18 phrase = \"I am \" + str(age) print(phrase) Arrays An array can be concatenated with another array. part1 = [\"Ho\", \"Ho\"] part2 = [\"Ho\"] combined = part1 + part2 print(combined) To concatenate something that is not an array, it must be cast (converted) to an array. myArray = [] myInt = 18 combined = myArray + [myInt] print(combined) Back to Table of Contents User input String input word1 = input(\"Enter the first word: \") word2 = input(\"Enter the second word: \") phrase = word1 + \" \" + word2 print(phrase) Non-string input Note: Anything from the keyboard is a string . Values that have a different datatype must be cast from string to the correct datatype, using one of the following functions: myInt = int(\"42\") myReal = float(\"3.14\") myBool = bool(\"True\") Example: value1 = int(input(\"Enter the first value: \")) value2 = int(input(\"Enter the second value: \")) addition = value1 + value2 print(addition) Back to Table of Contents Selection - simple Comparison operators Comparison operators are used to compare one value with another. All of the following examples produce a Boolean answer of True or False . Equality (the same as) 16 == 18 Inequality (not the same as) 16 != 18 Greater than 16 > 18 Greater than or equal to 16 >= 18 Less than 16 < 18 Less than or equal to 16 <= 18 Selection Selection makes use of a comparison operator to decide what to do. Example 1. Code is only run if the comparison is True . age = 21 if age >= 18: print(\"You can go to the pub.\") Example 2. One section of code is always run. age = 16 if age >= 18: print(\"You can go to the pub.\") else: print(\"You can't go to the pub.\") Example 3. Only the section of code for the first comparison that is True is run. There can be multiple elif statements. There can be multiple elif statements, and the else is optional. score = 81 if score >= 80: print(\"Excellent score!\") elif score >= 50: print(\"Well done!\") else: print(\"Oh dear!\") Back to Table of Contents Logical operators Compare more than one set of values to produce a Boolean answer of True or False . AND Both comparisons must be True to produce a final answer of True . Comparison 1 Comparison 2 Result False False False False True False True False False True True True Example AND 16 <= 18 and \"Night\" == \"Day\" OR One or both comparisons must be True to produce a final answer of True . Comparison 1 Comparison 2 Result False False False False True True True False True True True True Example OR 16 <= 18 or \"Night\" == \"Day\" NOT Reverses the result of the comparison. Comparison Result False True True False Example NOT not(16 <= 18) Selection - complex Complex selection makes use of logical operators. age = 21 banned = False if age >= 18 and not(banned): print(\"You can go to the pub.\") Back to Table of Contents Fixed and conditional loops Fixed loop (for) Before a fixed loop starts, the number of times it will run is stated. Example. Display the numbers 0 to 9, ten numbers in total. for counter in range(10): print(counter) The range function produces a sequence of values. The last value in the sequence is always one less than the stop value: range(stop) # Starts from 0 range(start, stop) range(start, stop, step) Example. Display the numbers 1 to 9. for counter in range(1, 10): print(counter) Example. Display the odd numbers from 1 to 9. for counter in range(1, 10, 2): print(counter) Conditional loop (while) Before a conditional loop starts, the number of times it will run is not stated. It only runs if the comparison is True . Each time the code is completed the comparison is checked again. If it is still True the code is run again. value = int(input(\"Enter a value: \")) while value < 10: value = value + 1 print(counter) Back to Table of Contents Predefined functions Random The code to produce a random number needs to be imported before it can be used. The code can be used to produce a random integer, with the lowest and highest possible values specified. import random myDice = random.randint(1, 6) print(myDice) Round Decimal Places The round function works with floating point values (decimals). It returns (produces) a value that is rounded to a specified number of decimal places myReal = 3.14159265359 myRound = round(myReal, 2) print(myRound) Whole number The round function can also be used to return a value without any decimal places (integer). The following example will return a value of 4. myReal= 3.5 myRound = round(myReal) print(myRound) The following example will also return a value of 4. myReal= 4.5 myRound = round(myReal) print(myRound) Note: Python does not always round up when a value has 5 tenths. Instead it rounds to the nearest even number! Length The length function works with strings and arrays. It returns a number of characters in a string or the number of elements in an array. String myString = \"Computing\" myLength = len(myString) print(myLength) Array myArrayOfIntegers = [56, 34, 2, 85, 51] myLength = len(myArrayOfIntegers) print(myLength) Back to Table of Contents Standard algorithms Input validation User input can be checked using a conditional loop. If the value entered is not acceptable an error message is displayed and the value re-entered until it is. It can be done two different ways, initial input before the loop or within the loop. Input before loop The conditional loop is only entered if the value entered is invalid. dice = int(input(\"Enter dice value: \")) while dice < 1 or dice > 6: print(\"Value must be from 1 to 6.\") dice = int(input(\"Enter dice value: \")) print(\"You entered \" + str(dice)) Input within loop Variable is assigned a value that will cause the loop condition to be true. dice = 0 while dice < 1 or dice > 6: dice = int(input(\"Enter dice value: \")) if dice < 1 or dice > 6: print(\"Value must be from 1 to 6.\") print(\"You entered \" + str(dice)) Back to Table of Contents Running total within a loop Fixed loop total = 0 for counter in range(4): age = int(input(\"Enter an age: \")) total = total + age print(\"The combined age is \" + str(total)) Conditional loop answer = \"\" total = 0 while answer != \"no\": age = int(input(\"Enter an age: \")) total = total + age answer = input(\"Enter another age? \") print(\"The combined age is \" + str(total)) Back to Table of Contents Traversing a 1-D array Arrays store more than one value, called elements. Each element has a position. Python starts counting from zero. Putting values in heights = [0.0] * 5 for index in range(len(heights)): height = float(input(\"Enter a height: \")) heights[index] = height print(heights) Getting values out Method 1 - using a loop variable ( index ) scores = [56, 34, 2, 85, 51] for index in range(len(scores)): print(scores[index]) Method 2 - not using a loop variable scores = [56, 34, 2, 85, 51] for score in scores: print(score) Multiple arrays A program can use more than one array, in the same way that a program can use multiple variables. Back to Table of Contents","title":"N5 Computing Science"},{"location":"N5-CS-SDD/#n5-computing-science","text":"{:.no_toc} Home","title":"N5 Computing Science"},{"location":"N5-CS-SDD/#software-design-and-development","text":"{:.no_toc} All the code examples use Python. They will work with Replit and Thonny . Python uses indentation (spaces at the beginning of a line) to show where code blocks are. Note: These notes are focused on N5 Computing Science so some terms are used differently. Any reference to an array will actually use a list .","title":"Software Design and Development"},{"location":"N5-CS-SDD/#table-of-contents-toc","text":"{:.no_toc} TOC will be displayed here {:toc}","title":"Table of Contents {#toc}"},{"location":"N5-CS-SDD/#information","text":"","title":"Information"},{"location":"N5-CS-SDD/#comments","text":"Single line comment. # This comment is not displayed Multiline comment. \"\"\" This comment is not displayed This comment is not displayed \"\"\"","title":"Comments"},{"location":"N5-CS-SDD/#display-information","text":"print(\"Hello world\") print(3.14)","title":"Display information"},{"location":"N5-CS-SDD/#computational-constructs","text":"","title":"Computational constructs"},{"location":"N5-CS-SDD/#assign-values","text":"Variables are used to store values. An assignment statement has 3 parts: = is the assignment operator (an equals sign in maths) The value to the right of the assignment operator The variable name to the left of the assignment operator The value is assigned to (stored in) the variable. The value might need to be calculated first before being assigned. myInteger = 5 myReal = 3.14 myCharacter = \"&\" myString = \"Hello\" myBoolean = True myArrayOfIntegers = [56, 34, 2, 85, 51] myArrayOfStrings = [\"\"] * 4","title":"Assign values"},{"location":"N5-CS-SDD/#arithmetic-operations","text":"Addition 4 + 2 Subtraction 4 - 2 Multiplication 4 * 2 Division 4 / 2 Exponentiation (to the power of) 4 ** 2 Examples myMultiplication = 3 * 2 print(myMultiplication) mySquare = 3 ** 2 print(mySquare) myAge = 21 myAge = myAge + 1 print(myAge) Back to Table of Contents","title":"Arithmetic operations"},{"location":"N5-CS-SDD/#concatenation","text":"Concatenate means to join together.","title":"Concatenation"},{"location":"N5-CS-SDD/#strings","text":"A string can be concatenated with another string. part1 = \"Ho\" part2 = \"use\" word = part1 + part2 print(word) Be sure to include a space between words when concatenating. word1 = \"Hello\" word2 = \"world\" phrase = word1 + \" \" + word2 print(phrase) To concatenate something that is not a string, it must be cast (converted) to a string. age = 18 phrase = \"I am \" + str(age) print(phrase)","title":"Strings"},{"location":"N5-CS-SDD/#arrays","text":"An array can be concatenated with another array. part1 = [\"Ho\", \"Ho\"] part2 = [\"Ho\"] combined = part1 + part2 print(combined) To concatenate something that is not an array, it must be cast (converted) to an array. myArray = [] myInt = 18 combined = myArray + [myInt] print(combined) Back to Table of Contents","title":"Arrays"},{"location":"N5-CS-SDD/#user-input","text":"","title":"User input"},{"location":"N5-CS-SDD/#string-input","text":"word1 = input(\"Enter the first word: \") word2 = input(\"Enter the second word: \") phrase = word1 + \" \" + word2 print(phrase)","title":"String input"},{"location":"N5-CS-SDD/#non-string-input","text":"Note: Anything from the keyboard is a string . Values that have a different datatype must be cast from string to the correct datatype, using one of the following functions: myInt = int(\"42\") myReal = float(\"3.14\") myBool = bool(\"True\") Example: value1 = int(input(\"Enter the first value: \")) value2 = int(input(\"Enter the second value: \")) addition = value1 + value2 print(addition) Back to Table of Contents","title":"Non-string input"},{"location":"N5-CS-SDD/#selection-simple","text":"","title":"Selection - simple"},{"location":"N5-CS-SDD/#comparison-operators","text":"Comparison operators are used to compare one value with another. All of the following examples produce a Boolean answer of True or False . Equality (the same as) 16 == 18 Inequality (not the same as) 16 != 18 Greater than 16 > 18 Greater than or equal to 16 >= 18 Less than 16 < 18 Less than or equal to 16 <= 18","title":"Comparison operators"},{"location":"N5-CS-SDD/#selection","text":"Selection makes use of a comparison operator to decide what to do. Example 1. Code is only run if the comparison is True . age = 21 if age >= 18: print(\"You can go to the pub.\") Example 2. One section of code is always run. age = 16 if age >= 18: print(\"You can go to the pub.\") else: print(\"You can't go to the pub.\") Example 3. Only the section of code for the first comparison that is True is run. There can be multiple elif statements. There can be multiple elif statements, and the else is optional. score = 81 if score >= 80: print(\"Excellent score!\") elif score >= 50: print(\"Well done!\") else: print(\"Oh dear!\") Back to Table of Contents","title":"Selection"},{"location":"N5-CS-SDD/#logical-operators","text":"Compare more than one set of values to produce a Boolean answer of True or False .","title":"Logical operators"},{"location":"N5-CS-SDD/#and","text":"Both comparisons must be True to produce a final answer of True . Comparison 1 Comparison 2 Result False False False False True False True False False True True True","title":"AND"},{"location":"N5-CS-SDD/#example-and","text":"16 <= 18 and \"Night\" == \"Day\"","title":"Example AND"},{"location":"N5-CS-SDD/#or","text":"One or both comparisons must be True to produce a final answer of True . Comparison 1 Comparison 2 Result False False False False True True True False True True True True","title":"OR"},{"location":"N5-CS-SDD/#example-or","text":"16 <= 18 or \"Night\" == \"Day\"","title":"Example OR"},{"location":"N5-CS-SDD/#not","text":"Reverses the result of the comparison. Comparison Result False True True False","title":"NOT"},{"location":"N5-CS-SDD/#example-not","text":"not(16 <= 18)","title":"Example NOT"},{"location":"N5-CS-SDD/#selection-complex","text":"Complex selection makes use of logical operators. age = 21 banned = False if age >= 18 and not(banned): print(\"You can go to the pub.\") Back to Table of Contents","title":"Selection - complex"},{"location":"N5-CS-SDD/#fixed-and-conditional-loops","text":"","title":"Fixed and conditional loops"},{"location":"N5-CS-SDD/#fixed-loop-for","text":"Before a fixed loop starts, the number of times it will run is stated. Example. Display the numbers 0 to 9, ten numbers in total. for counter in range(10): print(counter) The range function produces a sequence of values. The last value in the sequence is always one less than the stop value: range(stop) # Starts from 0 range(start, stop) range(start, stop, step) Example. Display the numbers 1 to 9. for counter in range(1, 10): print(counter) Example. Display the odd numbers from 1 to 9. for counter in range(1, 10, 2): print(counter)","title":"Fixed loop (for)"},{"location":"N5-CS-SDD/#conditional-loop-while","text":"Before a conditional loop starts, the number of times it will run is not stated. It only runs if the comparison is True . Each time the code is completed the comparison is checked again. If it is still True the code is run again. value = int(input(\"Enter a value: \")) while value < 10: value = value + 1 print(counter) Back to Table of Contents","title":"Conditional loop (while)"},{"location":"N5-CS-SDD/#predefined-functions","text":"","title":"Predefined functions"},{"location":"N5-CS-SDD/#random","text":"The code to produce a random number needs to be imported before it can be used. The code can be used to produce a random integer, with the lowest and highest possible values specified. import random myDice = random.randint(1, 6) print(myDice)","title":"Random"},{"location":"N5-CS-SDD/#round","text":"","title":"Round"},{"location":"N5-CS-SDD/#decimal-places","text":"The round function works with floating point values (decimals). It returns (produces) a value that is rounded to a specified number of decimal places myReal = 3.14159265359 myRound = round(myReal, 2) print(myRound)","title":"Decimal Places"},{"location":"N5-CS-SDD/#whole-number","text":"The round function can also be used to return a value without any decimal places (integer). The following example will return a value of 4. myReal= 3.5 myRound = round(myReal) print(myRound) The following example will also return a value of 4. myReal= 4.5 myRound = round(myReal) print(myRound) Note: Python does not always round up when a value has 5 tenths. Instead it rounds to the nearest even number!","title":"Whole number"},{"location":"N5-CS-SDD/#length","text":"The length function works with strings and arrays. It returns a number of characters in a string or the number of elements in an array.","title":"Length"},{"location":"N5-CS-SDD/#string","text":"myString = \"Computing\" myLength = len(myString) print(myLength)","title":"String"},{"location":"N5-CS-SDD/#array","text":"myArrayOfIntegers = [56, 34, 2, 85, 51] myLength = len(myArrayOfIntegers) print(myLength) Back to Table of Contents","title":"Array"},{"location":"N5-CS-SDD/#standard-algorithms","text":"","title":"Standard algorithms"},{"location":"N5-CS-SDD/#input-validation","text":"User input can be checked using a conditional loop. If the value entered is not acceptable an error message is displayed and the value re-entered until it is. It can be done two different ways, initial input before the loop or within the loop.","title":"Input validation"},{"location":"N5-CS-SDD/#input-before-loop","text":"The conditional loop is only entered if the value entered is invalid. dice = int(input(\"Enter dice value: \")) while dice < 1 or dice > 6: print(\"Value must be from 1 to 6.\") dice = int(input(\"Enter dice value: \")) print(\"You entered \" + str(dice))","title":"Input before loop"},{"location":"N5-CS-SDD/#input-within-loop","text":"Variable is assigned a value that will cause the loop condition to be true. dice = 0 while dice < 1 or dice > 6: dice = int(input(\"Enter dice value: \")) if dice < 1 or dice > 6: print(\"Value must be from 1 to 6.\") print(\"You entered \" + str(dice)) Back to Table of Contents","title":"Input within loop"},{"location":"N5-CS-SDD/#running-total-within-a-loop","text":"","title":"Running total within a loop"},{"location":"N5-CS-SDD/#fixed-loop","text":"total = 0 for counter in range(4): age = int(input(\"Enter an age: \")) total = total + age print(\"The combined age is \" + str(total))","title":"Fixed loop"},{"location":"N5-CS-SDD/#conditional-loop","text":"answer = \"\" total = 0 while answer != \"no\": age = int(input(\"Enter an age: \")) total = total + age answer = input(\"Enter another age? \") print(\"The combined age is \" + str(total)) Back to Table of Contents","title":"Conditional loop"},{"location":"N5-CS-SDD/#traversing-a-1-d-array","text":"Arrays store more than one value, called elements. Each element has a position. Python starts counting from zero.","title":"Traversing a 1-D array"},{"location":"N5-CS-SDD/#putting-values-in","text":"heights = [0.0] * 5 for index in range(len(heights)): height = float(input(\"Enter a height: \")) heights[index] = height print(heights)","title":"Putting values in"},{"location":"N5-CS-SDD/#getting-values-out","text":"Method 1 - using a loop variable ( index ) scores = [56, 34, 2, 85, 51] for index in range(len(scores)): print(scores[index]) Method 2 - not using a loop variable scores = [56, 34, 2, 85, 51] for score in scores: print(score)","title":"Getting values out"},{"location":"N5-CS-SDD/#multiple-arrays","text":"A program can use more than one array, in the same way that a program can use multiple variables. Back to Table of Contents","title":"Multiple arrays"},{"location":"N5-CS-WDD/","text":"N5 Computing Science {:.no_toc} Home Work in Progress Web Design and Development {:.no_toc} Note: HTML, CSS, and JavaScript use American spelling so when you see center or color they are not typos. All the code examples will work with Replit . Table of Contents {#toc} {:.no_toc} TOC will be displayed here {:toc} Hypertext Markup Language (HTML) HTML HTML uses elements to display content. An element normally consists of opening ( <tag> ) and closing ( </tag> ) tags, with the content to be display contained between the tags. HTML is not whitespace sensitive. This means a statement can be all on a single line or split over multiple lines. <tag>content</tag> <tag> content </tag> Opening tags can have attributes. <tag attribute=\"value\"> content </tag> All element HTML documents are contained within the opening and closing html tags. <!DOCTYPE html> <html lang=\"en-gb\"> </html> Information Comments Single line comment. <!-- This comment is not displayed --> Multiline comment. <!-- This comment is not displayed This comment is not displayed --> Display information Without HTML tags information is displayed as plain text, but with tags it will have the formatting associated with the tag. Hello world HTML document (Webpage) A HTML documen has two main parts: head : information about the page body : the content that is displayed <!DOCTYPE html> <html lang=\"en-gb\"> <head> </head> <body> </body> </html> Back to Table of Contents Head Title The webpage title will be displayed on the browser tab: <title>My Web Page</title> StyleLink The CSS for a webpage can be internal using the style tag. <style> <!-- CSS rules go here --> </style> The CSS for a webpage can be in an external file using the link element. <link href=\"styles.css\" rel=\"stylesheet\" type=\"text/css\"> Note : A few HTML elements do not have a closing tag, and link is one of them. Back to Table of Contents Body Heading There are six levels of heading. <h1>Highest level heading</h1> <h3>Mid-level heading</h3> <h6>Lowest leveleast heading level</h6> Paragraph <p>A paragraph of text.</p> <p>Another paragraph of text.</p> <p>Plus another paragraph of text.</p> Lists Lists can be ordered ( ol ) or unordered ul ). Both types of lists contain list items ( li ). Ordered list - Numbered {:.no_toc} <ol> <li>First list item</li> <li>Another list item</li> <li>Last list item</li> </ol> Unorderd list - Bullet points {:.no_toc} <ul> <li>First list item</li> <li>Another list item</li> <li>Last list item</li> </ul> Back to Table of Contents Division The <div> tag is used to divide the webpage into different parts. <div> <h1>First area</h1> <div> <div> <h1>Second area</h1> <div> Anchor (Hyperlinks) External {:.no_toc} Link to an external website, using asote aressin <a href=\"https://mrfriendcs.github.io/\">N5 CS Help</a> Internal {:.no_toc} Link to another webpage, in the same folder, using relative addressing. <a href=\"home.html\">Home</a> Media To ensure that media is displayed / played correctly the type attribute is used. File type Type jpeg / jpg image/jpeg png image/png mp3 audio/mpeg mp4 video/mp4 Image The image tag ( <img> ) has three attributes. The first ( src ) is where the image is located, and can use relative or absolute addressing. The second ( alt ) is the alternative text that will be displayed if the image can't be displayed, and is used by screen readers. <img src=\"laptop.jpg\" alt=\"Laptop on a table\"> Audio <audio controls src=\"clapping.mp3\"> No audio player available </audio> Video <video controls src=\"clapping.mp4\"> No video player available </video> Classes and IDs HTML elements can have additional attributes for class and id which are useful applying CSS rules to specific elements, and can be used by JavaScript . A class can be assigned to one or more cascading Style Sheets (CSS), whereas an ID can only be applied to one element on a page. Classes <p class=\"highlight\">A paragraph.</p> <p>Another paragraph.</p> <p class=\"highlight\">Plus another.</p> IDs <p id=\"main\">A paragraph.</p> <p>Another paragraph.</p> <p>Plus another.</p> Classes and IDs An element can have an ID and a class. <p id=\"main\" class=\"highlight\">A paragraph.</p> <p>Another paragraph.</p> <p class=\"highlight\">Plus another.</p> Back to Table of Contents Cascading Style Sheets (CSS) {#css} Information Comments Single line comment. /* This comment is not displayed */ Multiline comment. /* This comment is not displayed This comment is not displayed */ CSS rules Rules are terminated with a semicolon, ; . A rule will be applied without a semicolon but multiple rules will not. Single property selector {property: value;} Multiple properties selector {property: value; property: value;} Selectors Element selectors Element selectors are HTML tags without the angle brackets. All elements of that type will have their formatting modified by the CSS rule(s). p {property: value;} Class selectors Class selectors use the class name with a dot in front. .mainPara {property: value;} ID selectors ID selectors use the ID name with a hash in front. #otherPara {property: value;} CSS Precedence Selectors Element rules overwrite default rules Class rules overwrite element rules ID rules overwrite class rules Location External rules overwrite default rules Internal rules overwrite external rules Inline rules overwrite internal rules Back to Table of Contents plify and implement internal and external Cascading Style Sheets (CSS): selectors, classes and IDs CSS rules CSS rules Single property selector {property: value;} Multiple properties selector {property: value; property: value;} Properties Note: All examples will use a HTML element as the selector but would work equally well with a class or ID. Font p {font-family: sans-serif;} h1 {font-size: large;} Alignment h2 {text-align: left;} h3 {text-align: center;} h4 {text-align: right;} Colour The colour of the text and / or the background can be changed using one of the many predefined colours. To see a list visit W3Schools . To change the colour, the properties are: text : color background : background-color h5 {color: DarkRed; background-color: Cornsilk;} Back to Table of Contents JavaScript (JS) {#js} JavaScript statements are terminated with a semicolon, ; . An individual statement will probably run without a semicolon but multiple statements will not. Information Comments Single line comment. // This comment is not displayed Multiline comment. /* This comment is not displayed This comment is not displayed */ Mouse Over This event is triggered when the mouse is over an element that has the onmouseover listener set. It calls the associated JS function. <p id=\"mouse\" onmouseover=\"over()\">Function not called</p> <script> function over() { document.getElementById(\"mouse\").innerHTML = \"Mouse over\"; document.getElementById(\"mouse\").style.color = \"red\"; } </script> Mouse Out This event is triggered when the mouse is no longer over an element that has the onmouseout listener set. It calls the associated JS function. <p id=\"mouse\" onmouseout=\"out()\">Function not called</p> <script> function out() { document.getElementById(\"mouse\").innerHTML = \"Mouse out\"; document.getElementById(\"mouse\").style.color = \"red\"; } </script> This Passing this as a parameter to the JS function allows the same function to be used with multiple elements. <p onmouseover=\"change(this)\">A paragraph.</p> <p onmouseover=\"change(this)\">Another paragraph.</p> <script> function change(x) { x.style.color = \"red\"; x.style.backgroundColor = \"yellow\"; } </script> Back to Table of Contents","title":"N5 Computing Science"},{"location":"N5-CS-WDD/#n5-computing-science","text":"{:.no_toc} Home Work in Progress","title":"N5 Computing Science"},{"location":"N5-CS-WDD/#web-design-and-development","text":"{:.no_toc} Note: HTML, CSS, and JavaScript use American spelling so when you see center or color they are not typos. All the code examples will work with Replit .","title":"Web Design and Development"},{"location":"N5-CS-WDD/#table-of-contents-toc","text":"{:.no_toc} TOC will be displayed here {:toc}","title":"Table of Contents {#toc}"},{"location":"N5-CS-WDD/#hypertext-markup-language-html","text":"","title":"Hypertext Markup Language (HTML)"},{"location":"N5-CS-WDD/#html","text":"HTML uses elements to display content. An element normally consists of opening ( <tag> ) and closing ( </tag> ) tags, with the content to be display contained between the tags. HTML is not whitespace sensitive. This means a statement can be all on a single line or split over multiple lines. <tag>content</tag> <tag> content </tag> Opening tags can have attributes. <tag attribute=\"value\"> content </tag> All element HTML documents are contained within the opening and closing html tags. <!DOCTYPE html> <html lang=\"en-gb\"> </html>","title":"HTML"},{"location":"N5-CS-WDD/#information","text":"","title":"Information"},{"location":"N5-CS-WDD/#comments","text":"Single line comment. <!-- This comment is not displayed --> Multiline comment. <!-- This comment is not displayed This comment is not displayed -->","title":"Comments"},{"location":"N5-CS-WDD/#display-information","text":"Without HTML tags information is displayed as plain text, but with tags it will have the formatting associated with the tag. Hello world","title":"Display information"},{"location":"N5-CS-WDD/#html-document-webpage","text":"A HTML documen has two main parts: head : information about the page body : the content that is displayed <!DOCTYPE html> <html lang=\"en-gb\"> <head> </head> <body> </body> </html> Back to Table of Contents","title":"HTML document (Webpage)"},{"location":"N5-CS-WDD/#head","text":"","title":"Head"},{"location":"N5-CS-WDD/#title","text":"The webpage title will be displayed on the browser tab: <title>My Web Page</title>","title":"Title"},{"location":"N5-CS-WDD/#stylelink","text":"The CSS for a webpage can be internal using the style tag. <style> <!-- CSS rules go here --> </style>","title":"StyleLink"},{"location":"N5-CS-WDD/#_1","text":"The CSS for a webpage can be in an external file using the link element. <link href=\"styles.css\" rel=\"stylesheet\" type=\"text/css\"> Note : A few HTML elements do not have a closing tag, and link is one of them. Back to Table of Contents","title":""},{"location":"N5-CS-WDD/#body","text":"","title":"Body"},{"location":"N5-CS-WDD/#heading","text":"There are six levels of heading. <h1>Highest level heading</h1> <h3>Mid-level heading</h3> <h6>Lowest leveleast heading level</h6>","title":"Heading"},{"location":"N5-CS-WDD/#paragraph","text":"<p>A paragraph of text.</p> <p>Another paragraph of text.</p> <p>Plus another paragraph of text.</p>","title":"Paragraph"},{"location":"N5-CS-WDD/#lists","text":"Lists can be ordered ( ol ) or unordered ul ). Both types of lists contain list items ( li ).","title":"Lists"},{"location":"N5-CS-WDD/#ordered-list-numbered","text":"{:.no_toc} <ol> <li>First list item</li> <li>Another list item</li> <li>Last list item</li> </ol>","title":"Ordered list - Numbered"},{"location":"N5-CS-WDD/#unorderd-list-bullet-points","text":"{:.no_toc} <ul> <li>First list item</li> <li>Another list item</li> <li>Last list item</li> </ul> Back to Table of Contents","title":"Unorderd list - Bullet points"},{"location":"N5-CS-WDD/#division","text":"The <div> tag is used to divide the webpage into different parts. <div> <h1>First area</h1> <div> <div> <h1>Second area</h1> <div>","title":"Division"},{"location":"N5-CS-WDD/#anchor-hyperlinks","text":"","title":"Anchor (Hyperlinks)"},{"location":"N5-CS-WDD/#external","text":"{:.no_toc} Link to an external website, using asote aressin <a href=\"https://mrfriendcs.github.io/\">N5 CS Help</a>","title":"External"},{"location":"N5-CS-WDD/#internal","text":"{:.no_toc} Link to another webpage, in the same folder, using relative addressing. <a href=\"home.html\">Home</a>","title":"Internal"},{"location":"N5-CS-WDD/#media","text":"To ensure that media is displayed / played correctly the type attribute is used. File type Type jpeg / jpg image/jpeg png image/png mp3 audio/mpeg mp4 video/mp4","title":"Media"},{"location":"N5-CS-WDD/#image","text":"The image tag ( <img> ) has three attributes. The first ( src ) is where the image is located, and can use relative or absolute addressing. The second ( alt ) is the alternative text that will be displayed if the image can't be displayed, and is used by screen readers. <img src=\"laptop.jpg\" alt=\"Laptop on a table\">","title":"Image"},{"location":"N5-CS-WDD/#audio","text":"<audio controls src=\"clapping.mp3\"> No audio player available </audio>","title":"Audio"},{"location":"N5-CS-WDD/#video","text":"<video controls src=\"clapping.mp4\"> No video player available </video>","title":"Video"},{"location":"N5-CS-WDD/#classes-and-ids","text":"HTML elements can have additional attributes for class and id which are useful applying CSS rules to specific elements, and can be used by JavaScript . A class can be assigned to one or more cascading Style Sheets (CSS), whereas an ID can only be applied to one element on a page.","title":"Classes and IDs"},{"location":"N5-CS-WDD/#classes","text":"<p class=\"highlight\">A paragraph.</p> <p>Another paragraph.</p> <p class=\"highlight\">Plus another.</p>","title":"Classes"},{"location":"N5-CS-WDD/#ids","text":"<p id=\"main\">A paragraph.</p> <p>Another paragraph.</p> <p>Plus another.</p>","title":"IDs"},{"location":"N5-CS-WDD/#classes-and-ids_1","text":"An element can have an ID and a class. <p id=\"main\" class=\"highlight\">A paragraph.</p> <p>Another paragraph.</p> <p class=\"highlight\">Plus another.</p> Back to Table of Contents","title":"Classes and IDs"},{"location":"N5-CS-WDD/#cascading-style-sheets-css-css","text":"","title":"Cascading Style Sheets (CSS) {#css}"},{"location":"N5-CS-WDD/#information_1","text":"","title":"Information"},{"location":"N5-CS-WDD/#comments_1","text":"Single line comment. /* This comment is not displayed */ Multiline comment. /* This comment is not displayed This comment is not displayed */","title":"Comments"},{"location":"N5-CS-WDD/#css-rules","text":"Rules are terminated with a semicolon, ; . A rule will be applied without a semicolon but multiple rules will not.","title":"CSS rules"},{"location":"N5-CS-WDD/#single-property","text":"selector {property: value;}","title":"Single property"},{"location":"N5-CS-WDD/#multiple-properties","text":"selector {property: value; property: value;}","title":"Multiple properties"},{"location":"N5-CS-WDD/#selectors","text":"","title":"Selectors"},{"location":"N5-CS-WDD/#element-selectors","text":"Element selectors are HTML tags without the angle brackets. All elements of that type will have their formatting modified by the CSS rule(s). p {property: value;}","title":"Element selectors"},{"location":"N5-CS-WDD/#class-selectors","text":"Class selectors use the class name with a dot in front. .mainPara {property: value;}","title":"Class selectors"},{"location":"N5-CS-WDD/#id-selectors","text":"ID selectors use the ID name with a hash in front. #otherPara {property: value;}","title":"ID selectors"},{"location":"N5-CS-WDD/#css-precedence","text":"","title":"CSS Precedence"},{"location":"N5-CS-WDD/#selectors_1","text":"Element rules overwrite default rules Class rules overwrite element rules ID rules overwrite class rules","title":"Selectors"},{"location":"N5-CS-WDD/#location","text":"External rules overwrite default rules Internal rules overwrite external rules Inline rules overwrite internal rules Back to Table of Contents plify and implement internal and external Cascading Style Sheets (CSS):","title":"Location"},{"location":"N5-CS-WDD/#selectors-classes-and-ids","text":"","title":"selectors, classes and IDs"},{"location":"N5-CS-WDD/#css-rules_1","text":"CSS rules","title":"CSS rules"},{"location":"N5-CS-WDD/#single-property_1","text":"selector {property: value;}","title":"Single property"},{"location":"N5-CS-WDD/#multiple-properties_1","text":"selector {property: value; property: value;}","title":"Multiple properties"},{"location":"N5-CS-WDD/#properties","text":"Note: All examples will use a HTML element as the selector but would work equally well with a class or ID.","title":"Properties"},{"location":"N5-CS-WDD/#font","text":"p {font-family: sans-serif;} h1 {font-size: large;}","title":"Font"},{"location":"N5-CS-WDD/#alignment","text":"h2 {text-align: left;} h3 {text-align: center;} h4 {text-align: right;}","title":"Alignment"},{"location":"N5-CS-WDD/#colour","text":"The colour of the text and / or the background can be changed using one of the many predefined colours. To see a list visit W3Schools . To change the colour, the properties are: text : color background : background-color h5 {color: DarkRed; background-color: Cornsilk;} Back to Table of Contents","title":"Colour"},{"location":"N5-CS-WDD/#javascript-js-js","text":"JavaScript statements are terminated with a semicolon, ; . An individual statement will probably run without a semicolon but multiple statements will not.","title":"JavaScript (JS) {#js}"},{"location":"N5-CS-WDD/#information_2","text":"","title":"Information"},{"location":"N5-CS-WDD/#comments_2","text":"Single line comment. // This comment is not displayed Multiline comment. /* This comment is not displayed This comment is not displayed */","title":"Comments"},{"location":"N5-CS-WDD/#mouse-over","text":"This event is triggered when the mouse is over an element that has the onmouseover listener set. It calls the associated JS function. <p id=\"mouse\" onmouseover=\"over()\">Function not called</p> <script> function over() { document.getElementById(\"mouse\").innerHTML = \"Mouse over\"; document.getElementById(\"mouse\").style.color = \"red\"; } </script>","title":"Mouse Over"},{"location":"N5-CS-WDD/#mouse-out","text":"This event is triggered when the mouse is no longer over an element that has the onmouseout listener set. It calls the associated JS function. <p id=\"mouse\" onmouseout=\"out()\">Function not called</p> <script> function out() { document.getElementById(\"mouse\").innerHTML = \"Mouse out\"; document.getElementById(\"mouse\").style.color = \"red\"; } </script>","title":"Mouse Out"},{"location":"N5-CS-WDD/#this","text":"Passing this as a parameter to the JS function allows the same function to be used with multiple elements. <p onmouseover=\"change(this)\">A paragraph.</p> <p onmouseover=\"change(this)\">Another paragraph.</p> <script> function change(x) { x.style.color = \"red\"; x.style.backgroundColor = \"yellow\"; } </script> Back to Table of Contents","title":"This"}]}